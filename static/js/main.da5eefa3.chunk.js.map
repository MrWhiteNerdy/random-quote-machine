{"version":3,"sources":["Quote.js","App.js","serviceWorker.js","index.js"],"names":["Quote","_ref","quote","author","onNewQuote","react_default","a","createElement","className","id","onClick","href","concat","target","rel","App","state","this","getQuote","axios","get","headers","X-Mashape-Key","Content-Type","Accept","res","setState","data","src_Quote","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RA+BeA,MA7Bf,SAAAC,GAA8C,IAA7BC,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,OAAQC,EAAcH,EAAdG,WAC9B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,GAAG,aACvBJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaC,GAAG,QAC3BP,GAEHG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gCAAgCC,GAAG,UAC9CN,GAEHE,EAAAC,EAAAC,cAAA,UACEC,UAAU,uBACVC,GAAG,YACHC,QAASN,GAHX,aAMAC,EAAAC,EAAAC,cAAA,KACEI,KAAI,0CAAAC,OAA4CV,EAA5C,QAAAU,OAAwDT,GAC5DU,OAAO,SACPC,IAAI,sBACJN,UAAU,mCACVC,GAAG,eACHJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBCuBRO,6MAzCbC,MAAQ,CACNd,MAAO,GACPC,OAAQ,uFAIRc,KAAKC,4KAIaC,IAAMC,IACtB,wDACA,CACEC,QAAS,CACPC,gBAAiB,qDACjBC,eAAgB,oCAChBC,OAAQ,6BANRC,SAWNR,KAAKS,SAAS,CAAExB,MAAOuB,EAAIE,KAAK,GAAGzB,MAAOC,OAAQsB,EAAIE,KAAK,GAAGxB,4IAI9D,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAACqB,EAAD,CACE1B,MAAOe,KAAKD,MAAMd,MAClBC,OAAQc,KAAKD,MAAMb,OACnBC,WAAYa,KAAKC,SAASW,KAAKZ,kBAjC3Ba,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.da5eefa3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Quote({ quote, author, onNewQuote }) {\r\n  return (\r\n    <div className=\"card\" id=\"quote-box\">\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\" id=\"text\">\r\n          {quote}\r\n        </h5>\r\n        <h6 className=\"card-subtitle mb-2 text-muted\" id=\"author\">\r\n          {author}\r\n        </h6>\r\n        <button\r\n          className=\"btn btn-primary mt-5\"\r\n          id=\"new-quote\"\r\n          onClick={onNewQuote}>\r\n          New Quote\r\n        </button>\r\n        <a\r\n          href={`https://twitter.com/intent/tweet?text=\"${quote}\" - ${author}`}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"btn btn-primary mt-5 float-right\"\r\n          id=\"tweet-quote\">\r\n          <i className=\"fa fa-twitter\" />\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Quote;\r\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Quote from './Quote';\n\nclass App extends Component {\n  state = {\n    quote: '',\n    author: ''\n  };\n\n  componentDidMount() {\n    this.getQuote();\n  }\n\n  async getQuote() {\n    const res = await axios.get(\n      'https://andruxnet-random-famous-quotes.p.mashape.com/',\n      {\n        headers: {\n          'X-Mashape-Key': 'i65mrE13AImsh8UDnk5rBJz8uwk5p1Fn3mKjsnpR4Q9Z4217E4',\n          'Content-Type': 'application/x-www-form-urlencoded',\n          Accept: 'application/json'\n        }\n      }\n    );\n\n    this.setState({ quote: res.data[0].quote, author: res.data[0].author });\n  }\n\n  render() {\n    return (\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n          <div className=\"col-md-6 offset-md-3\">\n            <Quote\n              quote={this.state.quote}\n              author={this.state.author}\n              onNewQuote={this.getQuote.bind(this)}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}